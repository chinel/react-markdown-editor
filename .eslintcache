[{"C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-markdown-editor\\src\\index.js":"1","C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-markdown-editor\\src\\App.js":"2"},{"size":197,"mtime":1609142780304,"results":"3","hashOfConfig":"4"},{"size":896,"mtime":1609154144511,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1jplhpg",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-markdown-editor\\src\\index.js",[],["12","13"],"C:\\xampp\\htdocs\\react-apps\\20-react-apps\\react-markdown-editor\\src\\App.js",["14"],"import React, { useState } from \"react\";\nimport \"./App.css\";\nimport marked from \"marked\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport default function App() {\n  //the [markdown, setMarkdown]  is a value and function that was provided to us by useState and we use array destructuring to pull them out\n  const [markdown, setMarkdown] = useState(\"# sup\");\n\n  function handleChange(e) {\n    setMarkdown(e.target.value);\n  }\n\n  return (\n    <div className=\"app\">\n      <textarea onChange={handleChange} value={markdown} />\n\n      {/* <div\n        className=\"preview\"\n        dangerouslySetInnerHTML={{ __html: marked(markdown) }}\n      /> */}\n\n      {/**Here we switched to a more declarative approach using reactMardown which gives us a component and we no longer need to worry about dangerouslySetInnerHTML */}\n      <ReactMarkdown className=\"preview\" source={markdown} />\n    </div>\n  );\n}\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":3,"column":8,"nodeType":"21","messageId":"22","endLine":3,"endColumn":14},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'marked' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]